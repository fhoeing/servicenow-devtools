<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.MakeTestScriptForRecord</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Creates a boilerplate test script for the given record.</description>
        <mobile_callable>false</mobile_callable>
        <name>MakeTestScriptForRecord</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function MakeTestScriptForRecord(grRecord)
{
	if (IsValidRecord(grRecord) == false)
	{
		return false;
	}
	var strTable = grRecord.getRecordClassName();
	if (IsDerivedFromTable(strTable,'sys_metadata') == false)
	{
		return false;
	}

	if (strTable == 'sys_script_include')
	{
		var strScript = GetStringValue(grRecord.script);
		strScript = ScriptRemoveComments(strScript);
		var strName = GetStringValue(grRecord.name);

		// if single function script include
		if (StringCheckRegEx(strScript,'^\\s*function\\s+'+strName+'\\s*\\(') == true)
		{
			strParams = StringMatchRegEx(
				strScript,/\(([^)]+)\)/); 

			var aParams = GetArrayValue(strParams);
			strParamsCommaSeparated = GetStringValue(aParams);

			var strTestCode = '';

			strTestCode += "(function(outputs, steps, stepResult, assertEqual)\n";
			strTestCode += "{\n";
			strTestCode += "\tvar test = new x_snc_devtools.TestAPI(outputs, steps, stepResult, assertEqual);\n";
			strTestCode += "\t\n";
			strTestCode += "\ttest.SetResult(true);\n";
			strTestCode += "\t\n";
			strTestCode += "\tfunction TestCase_"+strName+"("+strParamsCommaSeparated+",vExpected)\n";
			strTestCode += "\t{\n";
			strTestCode += "\t\tfunction TestCase_"+strName+"_CheckResult(vInput,vExpected,vResult)\n";
			strTestCode += "\t\t{\n";
			strTestCode += "\t\t\treturn (vExpected == vResult);\n";
			strTestCode += "\t\t}\n";
			strTestCode += "\t\t\n";
			strTestCode += "\t\ttest.TestCase(\n";
			strTestCode += "\t\t\t'Function "+strName+"()',\n";
			strTestCode += "\t\t\t"+strName+",\n";
			strTestCode += "\t\t\t{\n";
			for (var nParam = 0; nParam < aParams.length; nParam++)
			{
				var strParam = aParams[nParam];
				strTestCode += "\t\t\t\t'"+strParam+"': "+strParam;
				if (nParam < aParams.length - 1)
				{
					strTestCode += ",";
				}
				strTestCode += "\n";
				
			}
			strTestCode += "\t\t\t},\n";
			strTestCode += "\t\t\tvExpected,\n";
			strTestCode += "\t\t\tTestCase_"+strName+"_CheckResult);\n";
			strTestCode += "\t}\n";
			strTestCode += "\t\t\n";
			strTestCode += "\tTestCase_"+strName+"(";
			for (var nParam = 0; nParam < aParams.length; nParam++)
			{
				strTestCode += "null";
				if (nParam < aParams.length - 1)
				{
					strTestCode += ",";
				}
			}
			strTestCode += ",false);\n";

			strTestCode += "\t\n";
			strTestCode += "\treturn test.GetResult();\n";
			strTestCode += "\t\n";
			strTestCode += "})(outputs, steps, stepResult, assertEqual);";

			return strTestCode;

		}	

		
		

		// if class script include
		// create test code based on considering all functions in the class

	}

	if (   strTable == 'scan_table_check'
		|| strTable == 'scan_linter_check'
		|| strTable == 'scan_column_type_check')
	{
		var strTestCode = '';

		var strCheckedRecordClassName = 'sys_script_include'; 
		if (strTable == 'scan_table_check')
		{
			strCheckedRecordClassName = GetStringValue(grRecord.table);
		}

		strTestCode += "(function(outputs, steps, stepResult, assertEqual)\n";
		strTestCode += "{\n";
		strTestCode += "\tvar test = new x_snc_devtools.TestAPI(outputs, steps, stepResult, assertEqual);\n";
		strTestCode += "\t\n";
		strTestCode += "\ttest.SetResult(true);\n";
		strTestCode += "\t\n";
		strTestCode += "\tvar strCheck = '"+grRecord.sys_id+"';\n";
		strTestCode += "\t\n";
		strTestCode += "\t// Test cases that provoke findings:\n";
		strTestCode += "\t\n";
		strTestCode += "\tvar grRecord = new GlideRecord('"+strCheckedRecordClassName+"');\n";
		strTestCode += "\tgrRecord.initialize();\n";
		strTestCode += "\t// TODO: Set values that provoke a finding!\n";
		strTestCode += "\tvar strRecordSysId = x_snc_devtools.GlideRecordInsert(grRecord);\n";
		strTestCode += "\ttest.TestCase_InstanceScanCheck(strCheck,'"+strCheckedRecordClassName+"',strRecordSysId,true);\n";
		strTestCode += "\t\n";
		strTestCode += "\t\n";
		strTestCode += "\t// Test cases that do NOT provoke findings:\n";
		strTestCode += "\t\n";
		strTestCode += "\tvar grRecord = new GlideRecord('"+strCheckedRecordClassName+"');\n";
		strTestCode += "\tgrRecord.initialize();\n";
		strTestCode += "\t// TODO: Set values that do NOT provoke a finding!\n";
		strTestCode += "\tvar strRecordSysId = x_snc_devtools.GlideRecordInsert(grRecord);\n";
		strTestCode += "\ttest.TestCase_InstanceScanCheck(strCheck,'"+strCheckedRecordClassName+"',strRecordSysId,false);\n";
		strTestCode += "\t\n";
		strTestCode += "\t\n";
		strTestCode += "\treturn test.GetResult();\n";
		strTestCode += "\t\n";
		strTestCode += "})(outputs, steps, stepResult, assertEqual);";

		return strTestCode;

	}
		
	// Default: fallback to macro "TestAPI"
	var grMacro = new GlideRecord('syntax_editor_macro');
	grMacro.addQuery('name','=','TestAPI');
	grMacro.query();
	if (grMacro.next() == false)
	{
		return false;
	}
	return GetStringValue(grMacro.text);
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-04-30 09:42:37</sys_created_on>
        <sys_id>f8cc83189391e610959b7fda2bba103e</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>MakeTestScriptForRecord</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_f8cc83189391e610959b7fda2bba103e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-02 07:07:22</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>f8cc83189391e610959b7fda2bba103e</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-04-30 09:42:36</sys_created_on>
        <sys_id>f3fc07189391e610959b7fda2bba10c4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-04-30 09:42:36</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
